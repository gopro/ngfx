OS ?= $1
ifeq ($(OS),)
	$(error OS is undefined)
endif

ifeq ($(OS),Windows)
	CMAKE_GENERATOR ?= "Visual Studio 16 2019"
	CMAKE_SYSTEM_VERSION ?= 10.0.18362.0
	SHADERC_VERSION ?= 2020.3
	VCPKG_DIR ?= C:\\vcpkg
	VCPKG_DIR_WSL = $(shell wslpath -a "$(VCPKG_DIR)")
	ifeq ($(shell test -d $(VCPKG_DIR_WSL)),1)
		$(error $(VCPKG_DIR_WSL) doesn't exist)
	endif
    $(info VCPKG_DIR_WSL: $(VCPKG_DIR_WSL))
	VCPKG_TRIPLET ?= x64-windows
	VULKAN_SDK_VERSION ?= 1.2.162.1
	PKGCONF_VERSION ?= 1.7.4
	PREFIX ?= $(shell wslpath -wa .)\windows
else ifeq ($(OS),Linux)
	VULKAN_SDK_VERSION ?= 1.2.170
else ifeq ($(OS),Darwin)
	SHADERC_VERSION ?= 2020.3
endif

PKGS ?= 
ifeq ($($(PKGS)),)
	PKGS = nlohmann-json stb
	ifeq ($(OS),Windows)
		PKGS += glm d3dx12 glfw unzip VulkanSDK-$(VULKAN_SDK_VERSION) spirv-cross shaderc-$(SHADERC_VERSION) meson pkgconf
	else ifeq ($(OS),Linux)
		PKGS += ninja-build cmake libglm-dev libglfw3-dev libglew-dev renderdoc VulkanSDK-$(VULKAN_SDK_VERSION)
	else ifeq ($(OS),Darwin)
		PKGS += pkg-config glm spirv-cross ninja cmake shaderc-$(SHADERC_VERSION)
	endif
endif

UNZIP ?= unzip -q -n
WGET ?= wget -nc -q

$(info OS: $(OS))
$(info PACKAGES: $(PKGS))

all: $(PKGS)

.nlohmann-json-installed:
	$(WGET) https://raw.githubusercontent.com/nlohmann/json/develop/single_include/nlohmann/json.hpp -P json/include
	touch $@
nlohmann-json: .nlohmann-json-installed

.stb-installed:
	$(WGET) https://raw.githubusercontent.com/nothings/stb/master/stb_image.h -P stb
	touch $@
stb: .stb-installed

.apt-updated:
	sudo apt -y update
	touch $@

ifeq ($(OS),Windows)

    .unzip-installed: .apt-updated
		sudo apt -y install unzip
		touch $@
    unzip: .unzip-installed

    .glm-installed: unzip
		$(WGET) https://github.com/g-truc/glm/releases/download/0.9.9.8/glm-0.9.9.8.zip
		$(UNZIP) -d glm-0.9.9.8 glm-0.9.9.8.zip
		touch $@
    glm: .glm-installed

    .d3dx12-installed:
		$(WGET) https://raw.githubusercontent.com/microsoft/DirectX-Graphics-Samples/v10.0.17763.0/Libraries/D3DX12/d3dx12.h -P d3dx12
		touch $@
    d3dx12: .d3dx12-installed

    .glfw-installed: unzip
		$(WGET) https://github.com/glfw/glfw/releases/download/3.3.2/glfw-3.3.2.bin.WIN64.zip
		$(UNZIP) glfw-3.3.2.bin.WIN64.zip
		touch $@
    glfw: .glfw-installed

    .meson-installed:
		pip.exe install meson
		touch $@
    meson: .meson-installed

    .pkgconf-installed: meson
		$(WGET) https://distfiles.dereferenced.org/pkgconf/pkgconf-$(PKGCONF_VERSION).tar.xz
		tar -xf pkgconf-$(PKGCONF_VERSION).tar.xz
		cd pkgconf-$(PKGCONF_VERSION) && \
		meson.exe setup --backend vs --buildtype=release . meson-build-release -Dtests=false && \
		meson.exe compile -C meson-build-release -j8 && \
		meson.exe install -C meson-build-release
		touch $@
    pkgconf: .pkgconf-installed

    .VulkanSDK-$(VULKAN_SDK_VERSION)-installed:
		$(WGET) https://sdk.lunarg.com/sdk/download/$(VULKAN_SDK_VERSION)/windows/VulkanSDK-$(VULKAN_SDK_VERSION)-Installer.exe
		chmod a+x VulkanSDK-$(VULKAN_SDK_VERSION)-Installer.exe
		-./VulkanSDK-$(VULKAN_SDK_VERSION)-Installer.exe /S
		touch $@
    VulkanSDK-$(VULKAN_SDK_VERSION): .VulkanSDK-$(VULKAN_SDK_VERSION)-installed

    .spirv-cross-installed:
		cd $(VCPKG_DIR_WSL) && \
		./vcpkg.exe install --triplet $(VCPKG_TRIPLET) spirv-cross
		touch $@
    spirv-cross: .spirv-cross-installed

    .shaderc-$(SHADERC_VERSION)-installed:
		$(WGET) https://github.com/google/shaderc/archive/v$(SHADERC_VERSION).tar.gz
		tar xzf v$(SHADERC_VERSION).tar.gz
		cd shaderc-$(SHADERC_VERSION) && ./utils/git-sync-deps && \
		cmake.exe -S . -B cmake-build-release -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX="$(PREFIX)" -DCMAKE_MSVC_RUNTIME_LIBRARY:STRING=MultiThreadedDLL -DCMAKE_SYSTEM_VERSION=$(CMAKE_SYSTEM_VERSION) -G$(CMAKE_GENERATOR) -DSHADERC_SKIP_TESTS=ON && \
		cmake.exe --build cmake-build-release --config Release -j8 && \
		cmake.exe --install cmake-build-release
		touch $@
    shaderc-$(SHADERC_VERSION): .shaderc-$(SHADERC_VERSION)-installed

else ifeq ($(OS),Linux)

    .ninja-build-installed: .apt-updated
		sudo apt -y install ninja-build
		touch $@
    ninja-build: .ninja-build-installed

    .cmake-installed: .apt-updated
		sudo apt -y install cmake
		touch $@
    cmake: .cmake-installed

    .libglm-dev-installed: .apt-updated
		sudo apt -y install libglm-dev
		touch $@
    libglm-dev: .libglm-dev-installed

   .libglfw3-dev-installed: .apt-updated
		sudo apt -y install libglfw3-dev
		touch $@
    libglfw3-dev: .libglfw3-dev-installed

    .libglew-dev-installed: .apt-updated
		sudo apt -y install libglew-dev
		touch $@
    libglew-dev: .libglew-dev-installed

    .renderdoc-installed: .apt-updated
		sudo apt -y install renderdoc
		touch $@
    renderdoc: .renderdoc-installed

    .VulkanSDK-$(VULKAN_SDK_VERSION)-installed:
		wget -qO - https://packages.lunarg.com/lunarg-signing-key-pub.asc | sudo apt-key add -
		sudo wget -qO /etc/apt/sources.list.d/lunarg-vulkan-$(VULKAN_SDK_VERSION)-focal.list https://packages.lunarg.com/vulkan/$(VULKAN_SDK_VERSION)/lunarg-vulkan-$(VULKAN_SDK_VERSION)-focal.list
		sudo apt -y update
		sudo apt install vulkan-sdk
		touch $@
    VulkanSDK-$(VULKAN_SDK_VERSION): .VulkanSDK-$(VULKAN_SDK_VERSION)-installed

else ifeq ($(OS),Darwin)

    .pkg-config-installed:
		brew install pkg-config
		touch $@
    pkg-config: .pkg-config-installed

    .glm-installed:
		brew install glm
		touch $@
    glm: .glm-installed

    .spirv-cross-installed:
		brew install spirv-cross
		touch $@
    spirv-cross: .spirv-cross-installed

    .ninja-installed:
		brew install ninja
		touch $@
    ninja: .ninja-installed

    .cmake-installed:
		brew install cmake
		touch $@
    cmake: .cmake-installed

    .shaderc-$(SHADERC_VERSION)-installed:
		$(WGET) https://github.com/google/shaderc/archive/v$(SHADERC_VERSION).tar.gz
		tar xzf v$(SHADERC_VERSION).tar.gz
		cd shaderc-$(SHADERC_VERSION) && ./utils/git-sync-deps && \
		cmake -S . -B cmake-build-release -DCMAKE_BUILD_TYPE=Release -GNinja -DSHADERC_SKIP_TESTS=ON && \
		cmake --build cmake-build-release --config Release -j8 && \
		sudo cmake --install cmake-build-release
		touch $@
    shaderc-$(SHADERC_VERSION): .shaderc-$(SHADERC_VERSION)-installed

endif
